// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-ticker-turbo using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=convertAssetQuoteExtendedCurrency_eb94850151
ROOST_METHOD_SIG_HASH=convertAssetQuoteExtendedCurrency_e3d649d65f

================================VULNERABILITIES================================
Vulnerability: CWE-681: Incorrect Conversion between Numeric Types
Issue: Function convertAssetQuoteExtendedCurrency multiplies various fields by a currency conversion rate without considering potential float64 precision issues, which can lead to incorrect financial calculations.
Solution: Use a fixed-point arithmetic library or package that provides monetary and currency conversion functionality to avoid precision errors in financial calculations.

================================================================================
The function `convertAssetQuoteExtendedCurrency` is found within the `currency.go` file, which is part of the `asset` package. It takes two parameters: `currencyRateByUse` of type `currency.CurrencyRateByUse` and `quoteExtended` of type `c.QuoteExtended`. It returns a value of type `c.QuoteExtended`.

Here are some potential test scenarios for this function:

### Scenario 1: Successful Conversion

Details:
  TestName: TestConvertAssetQuoteExtendedCurrencySuccess
  Description: This test examines if the `convertAssetQuoteExtendedCurrency` function successfully converts quote fields using the provided exchange rate.
Execution:
  Arrange: Create a `currencyRateByUse` with a specific exchange rate and a `c.QuoteExtended` with some predefined values.
  Act: Call `convertAssetQuoteExtendedCurrency` with the arranged objects.
  Assert: Use Go's assertions to check if the returned `c.QuoteExtended` object has the expected computed values based on the exchange rate.
Validation:
  Justify: Verifying that calculation and currency conversion are performed correctly is fundamental for financial applications.
  Importance: This test ensures that the quote is accurately converted, which is a critical operation for representing financial information in the desired currency.

### Scenario 2: Zero Exchange Rate

Details:
  TestName: TestConvertAssetQuoteExtendedCurrencyZeroRate
  Description: This test checks the behavior of `convertAssetQuoteExtendedCurrency` when the exchange rate is zero.
Execution:
  Arrange: Create a `currencyRateByUse` with a zero exchange rate and a `c.QuoteExtended`.
  Act: Call `convertAssetQuoteExtendedCurrency` with the arranged objects.
  Assert: Check that the returned `c.QuoteExtended` object has fields set to zero where applicable.
Validation:
  Justify: It's important to handle edge cases like a zero exchange rate to avoid unexpected behavior in the system.
  Importance: Ensuring that the function behaves predictably with a zero exchange rate is crucial for robustness.

### Scenario 3: Negative Exchange Rate

Details:
  TestName: TestConvertAssetQuoteExtendedCurrencyNegativeRate
  Description: This test validates the function's behavior with a negative exchange rate, which may indicate an error in data.
Execution:
  Arrange: Create a `currencyRateByUse` with a negative exchange rate and a `c.QuoteExtended`.
  Act: Call `convertAssetQuoteExtendedCurrency` with the arranged objects.
  Assert: Check that the returned `c.QuoteExtended` object has corresponding negative values.
Validation:
  Justify: The application should account for and correctly process negative values.
  Importance: Testing with negative numbers helps to ensure stability and reveals potential issues in data handling.

These scenarios explore different aspects of the function `convertAssetQuoteExtendedCurrency`, including normal operations, edge cases, and potentially invalid inputs. Each test is designed to verify the correctness and robustness of the function under various conditions, which is fundamental for financial computations that must be accurate and reliable.
*/

// ********RoostGPT********
package asset

import (
	"testing"

	c "github.com/achannarasappa/ticker/internal/common"
	"github.com/achannarasappa/ticker/internal/currency"
	"github.com/stretchr/testify/assert"
)

func TestConvertAssetQuoteExtendedCurrencySuccess(t *testing.T) {
	// Arrange
	currencyRateByUse := currency.CurrencyRateByUse{QuotePrice: 1.1}
	quoteExtended := c.QuoteExtended{
		FiftyTwoWeekHigh: 100,
		FiftyTwoWeekLow:  80,
		MarketCap:        1000000,
		Volume:           50000,
	}

	expected := c.QuoteExtended{
		FiftyTwoWeekHigh: 110,
		FiftyTwoWeekLow:  88,
		MarketCap:        1100000,
		Volume:           50000,
	}

	// Act
	result := convertAssetQuoteExtendedCurrency(currencyRateByUse, quoteExtended)

	// Assert
	assert.Equal(t, expected, result)
}

func TestConvertAssetQuoteExtendedCurrencyZeroRate(t *testing.T) {
	// Arrange
	currencyRateByUse := currency.CurrencyRateByUse{QuotePrice: 0}
	quoteExtended := c.QuoteExtended{
		FiftyTwoWeekHigh: 100,
		FiftyTwoWeekLow:  80,
		MarketCap:        1000000,
		Volume:           50000,
	}

	expected := c.QuoteExtended{
		FiftyTwoWeekHigh: 0,
		FiftyTwoWeekLow:  0,
		MarketCap:        0,
		Volume:           50000,
	}

	// Act
	result := convertAssetQuoteExtendedCurrency(currencyRateByUse, quoteExtended)

	// Assert
	assert.Equal(t, expected, result)
}

func TestConvertAssetQuoteExtendedCurrencyNegativeRate(t *testing.T) {
	// Arrange
	currencyRateByUse := currency.CurrencyRateByUse{QuotePrice: -1.1}
	quoteExtended := c.QuoteExtended{
		FiftyTwoWeekHigh: 100,
		FiftyTwoWeekLow:  80,
		MarketCap:        1000000,
		Volume:           50000,
	}

	expected := c.QuoteExtended{
		FiftyTwoWeekHigh: -110,
		FiftyTwoWeekLow:  -88,
		MarketCap:        -1100000,
		Volume:           50000,
	}

	// Act
	result := convertAssetQuoteExtendedCurrency(currencyRateByUse, quoteExtended)

	// Assert
	assert.Equal(t, expected, result)
}
